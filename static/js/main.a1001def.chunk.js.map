{"version":3,"sources":["visualization/chart.d3.js","visualization/chart.component.js","App.js","serviceWorker.js","index.js"],"names":["d3","select","selectAll","selection","Chart","state","id","this","createId","svgWidth","svgHeight","marginTop","marginBottom","marginRight","marginLeft","container","defaultTextFill","defaultFont","ctx","document","createElement","getContext","data","initializeEnterExitUpdatePattern","d","Object","assign","Date","now","toString","Math","random","substr","setState","prototype","patternify","params","selector","elementTag","tag","i","exit","remove","enter","append","merge","attr","setDynamicContainer","calculateProperties","drawSvgAndWrappers","drawContent","reRenderOnResize","getState","chart","console","log","text","name","d3Container","window","on","containerRect","node","getBoundingClientRect","newSvgWidth","width","render","calc","chartLeftMargin","chartTopMargin","svg","chartWidth","chartHeight","ChartComponent","props","ref","useRef","useLayoutEffect","current","innerHeight","App","className","Boolean","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a1001def.chunk.js","sourcesContent":["import { select, selectAll, selection } from 'd3';\n\nconst d3 = { select, selectAll, selection };\n\nexport class Chart {\n    // Define state getters and setters\n    getState() { return this.state; }\n    setState(d) { return Object.assign(this.state, d) };\n    createId() { return Date.now().toString(36) + Math.random().toString(36).substr(2); }\n\n    state = {\n        id: this.createId(),\n        svgWidth: 400,\n        svgHeight: 400,\n        marginTop: 5,\n        marginBottom: 5,\n        marginRight: 5,\n        marginLeft: 5,\n        container: 'body',\n        defaultTextFill: '#2C3E50',\n        defaultFont: 'Helvetica',\n        ctx: document.createElement('canvas').getContext('2d'),\n        data: null\n    };\n\n    constructor() {\n        // Define handful d3 enter, exit, update pattern method\n        this.initializeEnterExitUpdatePattern();\n    }\n\n    container(container) {\n        this.setState({ container });\n        return this;\n    }\n\n    data(data) {\n        this.setState({ data });\n        return this;\n    }\n\n    svgHeight(svgHeight) {\n        this.setState({ svgHeight });\n        return this;\n    }\n\n    svgWidth(svgWidth) {\n        this.setState({ svgWidth });\n        return this;\n    }\n\n    // Define enter exit update pattern shorthand\n    initializeEnterExitUpdatePattern() {\n        d3.selection.prototype.patternify = function (params) {\n            var container = this;\n            var selector = params.selector;\n            var elementTag = params.tag;\n            var data = params.data || [selector];\n\n            // Pattern in action\n            var selection = container.selectAll('.' + selector).data(data, (d, i) => {\n                if (typeof d === 'object' && d.id) return d.id;\n                return i;\n            });\n            selection.exit().remove();\n            selection = selection.enter().append(elementTag).merge(selection);\n            selection.attr('class', selector);\n            return selection;\n        };\n    }\n\n    // Render Chart\n    render() {\n        // Define containers and set SVG width based on container size\n        this.setDynamicContainer();\n\n        // Calculate some properties\n        this.calculateProperties();\n\n        // Draw SVG and its wrappers\n        this.drawSvgAndWrappers();\n\n        //TODO - REMOVE THIS SNIPPET AFTER YOU START THE DEVELOPMENT\n        this.drawContent();\n\n        // listen for resize event and reRender accordingly\n        this.reRenderOnResize();\n\n        // Allow chaining\n        return this;\n    }\n\n    // TODO - REMOVE THIS SNIPPET AFTER YOU START THE DEVELOPMENT\n    drawContent() {\n        const { chart, data } = this.getState();\n        console.log(data)\n        chart\n            .patternify({ tag: 'text', selector: 'example-text', data: [data] })\n            .text(d => { return d.name })\n            .attr('x', 10)\n            .attr('y', 20);\n    }\n\n    // Listen resize event and resize on change\n    reRenderOnResize() {\n        const { id, d3Container, svgWidth } = this.getState();\n        d3.select(window).on('resize.' + id, () => {\n            const containerRect = d3Container.node().getBoundingClientRect();\n            const newSvgWidth = containerRect.width > 0 ? containerRect.width : svgWidth;\n            this.setState({ svgWidth: newSvgWidth });\n            this.render();\n        });\n    }\n\n    // Draw SVG and g wrapper\n    drawSvgAndWrappers() {\n        const { d3Container, svgWidth, svgHeight, defaultFont, calc } = this.getState();\n        const { chartLeftMargin, chartTopMargin } = calc;\n\n        // Draw SVG\n        const svg = d3Container\n            .patternify({ tag: 'svg', selector: 'svg-chart-container' })\n            .attr('width', svgWidth)\n            .attr('height', svgHeight)\n            .attr('font-family', defaultFont);\n\n        // Add container g element\n        var g = svg\n            .patternify({ tag: 'g', selector: 'inner-wrapper' })\n            .attr('transform', 'translate(' + chartLeftMargin + ',' + chartTopMargin + ')');\n\n        // Add container g element\n        var chart = g\n            .patternify({ tag: 'g', selector: 'chart' })\n\n        this.setState({ chart, svg });\n    }\n\n    // Calculate some properties\n    calculateProperties() {\n        const { marginTop, marginLeft, marginRight, marginBottom, svgWidth, svgHeight } = this.getState();\n\n        // Calculated properties\n        var calc = {\n            id: this.createId(), // id for event handlings,\n            chartTopMargin: marginTop,\n            chartLeftMargin: marginLeft,\n            chartWidth: svgWidth - marginRight - marginLeft,\n            chartHeight: svgHeight - marginBottom - marginTop\n        };\n\n        this.setState({ calc })\n    }\n\n    // Set dynamic width for chart\n    setDynamicContainer() {\n        const { container, svgWidth } = this.getState();\n\n        // Drawing containers\n        const d3Container = d3.select(container);\n        var containerRect = d3Container.node().getBoundingClientRect();\n        let newSvgWidth = containerRect.width > 0 ? containerRect.width : svgWidth;\n        this.setState({ d3Container, svgWidth: newSvgWidth });\n    }\n\n}","import React, { useLayoutEffect, useRef } from \"react\";\nimport { Chart } from \"./chart.d3\";\n\nexport const ChartComponent = (\n    props,\n    ref\n) => {\n    const d3Container = useRef(null);\n    let chart = null;\n\n    // We need to manipulate DOM\n    useLayoutEffect(() => {\n        if (props.data && d3Container.current) {\n            if (!chart) {\n                /* eslint-disable */\n                chart = new Chart();\n            }\n\n            chart\n                .container(d3Container.current)\n                .data(props.data)\n                .svgHeight(window.innerHeight - 20)\n                .render();\n        }\n    }, [props.data, d3Container.current]);\n\n    return (\n        <div>\n            <div ref={d3Container} />\n        </div>\n    );\n};","import React from 'react';\nimport './App.css';\nimport { ChartComponent } from \"./visualization/chart.component\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <ChartComponent data={{name:'test'}} ></ChartComponent>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}